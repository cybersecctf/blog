
from sympy import mod_inverse
import sys
sys.path.append('/home/solup/Desktop/blog')  # This is an absolute path
import blog
import writeup2
def rsa(n1,n2,n3,c1,c2,c3):
 from sympy import mod_inverse, integer_nthroot
 from Crypto.Util.number import long_to_bytes
 # Calculate N
 N = n1 * n2 * n3
 # Calculate N1, N2, N3
 N1 = N // n1
 N2 = N // n2
 N3 = N // n3
 # Calculate the modular inverses y1, y2, y3
 y1 = mod_inverse(N1, n1)
 y2 = mod_inverse(N2, n2)
 y3 = mod_inverse(N3, n3)
 # Use the Chinese Remainder Theorem to find x
 x = (c1 * N1 * y1 + c2 * N2 * y2 + c3 * N3 * y3) % N
 # Take the cube root of x
 m, exact = integer_nthroot(x, 3)
 flag = long_to_bytes(m).decode()
 return  flag
def solve(a,n,r1=0,r2=0):
 from sympy import mod_inverse
 # Find the product of all moduli
 N = n[0] * n[1] * n[2]
 # Calculate individual components
 N1 = N // n[0]
 N2 = N // n[1]
 N3 = N // n[2]
 # Compute the modular inverses
 inv1 = mod_inverse(N1, n[0])
 inv2 = mod_inverse(N2, n[1])
 inv3 = mod_inverse(N3, n[2])
 # Calculate the solution using CRT
 x = (a[0] * N1 * inv1 + a[1] * N2 * inv2 + a[2] * N3 * inv3) % N
 print(f"The solution to the system of congruences is x â‰¡ {x} (mod {N})")
 # Given the range [1000, 1100], find the appropriate value for k
 k = (r1 - x + N - 1) // N  # Use floor division
 solution = x + k * N
 # Check if the solution is within the range
 
 if r1 <= solution <= r2:
    return f"The number of soldiers Han Xin had remaining is {solution}"
 else:
    return  "No solution found within the specified range"
if __name__ == "__main__" :
 a=blog.set([2,4,5],1)
 n=blog.set([3,5,7],2)
 print(solve(a,n,1000,1100))
 n1 = 147896270072551360195753454363282299426062485174745759351211846489928910241753224819735285744845837638083944350358908785909584262132415921461693027899236186075383010852224067091477810924118719861660629389172820727449033189259975221664580227157731435894163917841980802021068840549853299166437257181072372761693
 n2 = 95979365485314068430194308015982074476106529222534317931594712046922760584774363858267995698339417335986543347292707495833182921439398983540425004105990583813113065124836795470760324876649225576921655233346630422669551713602423987793822459296761403456611062240111812805323779302474406733327110287422659815403
 n3 = 95649308318281674792416471616635514342255502211688462925255401503618542159533496090638947784818456347896833168508179425853277740290242297445486511810651365722908240687732315319340403048931123530435501371881740859335793804194315675972192649001074378934213623075830325229416830786633930007188095897620439987817
 c1 = 105001824161664003599422656864176455171381720653815905925856548632486703162518989165039084097502312226864233302621924809266126953771761669365659646250634187967109683742983039295269237675751525196938138071285014551966913785883051544245059293702943821571213612968127810604163575545004589035344590577094378024637
 c2 = 31631442837619174301627703920800905351561747632091670091370206898569727230073839052473051336225502632628636256671728802750596833679629890303700500900722642779064628589492559614751281751964622696427520120657753178654351971238020964729065716984136077048928869596095134253387969208375978930557763221971977878737
 c3 = 64864977037231624991423831965394304787965838591735479931470076118956460041888044329021534008265748308238833071879576193558419510910272917201870797698253331425756509041685848066195410586013190421426307862029999566951239891512032198024716311786896333047799598891440799810584167402219122283692655717691362258659
 a=[n1,n2,n3]
 n=[c1,c2,c3] 
 print(writeup2.solve(n1,n2,n3,c1,c2,c3))
